David Frymoyer and Jillian Fliedner


DRAWBACKS OF THE FILE SYSTEM:

We emulated the ext file system. As such we have many of the issues of that
file system which we covered in class. For example we have a bitmap of free
blocks which we use to track free blocks, this gets slow on big disks,
which can obviously be a disadvantage. However, it’s obviously not one that
we would notice in an assignment like this one.
We also currently have our file system tied to the 1MB size, which is a problem
because we have to recompile anytime it changes. Obviously, this gets
frustrating and inconvenient.
Another issue present in our file system is that we allocate memory in 4k pages.
This is probably larger than we would truly prefer. If we were to work on this
project further we would have smaller blocks of memory and more than one direct
block per inode. The ext file system is really optimized for a particular
file size distribution, so this is a drawback. It is also not optimized for
spinning disks, but this is not as modern of a drawback.

————————————————————————————————————————————————————————————————————————————————

ADVANTAGES OF THE FILE SYSTEM:

A few advantages of our filesystem is that we can use random blocks to compose 
a file, but it will also prefer sequential blocks when allocating files. Obviously,
there is also advantages that come with the use of inodes. The use of inodes is
optimized for file systems that have many small files, and the average file is
indeed a small file. The inodes allow for faster file access with less random
seeking and no need to go through long, chained FAT entries. Another advantage
that comes with the use of inodes is easier free space management, because bitmaps
can allow for fast access through caching. The ext file system has to do less
seeking than a FAT system might, it allows for hard and soft links, and it
conveniently includes all the typical file and directory features.

————————————————————————————————————————————————————————————————————————————————

If we had more time we would also clean up the code. We wrote a fair amount of
utility functions which would have made writing the code easier in the
beginning.

We implemented all of the required features; no more, no less. If you count it,
we added the ability to hard link, which wasn't written in the nufs.c starter
code, but it was tested for so we consider it required. So our definition of
required here is that it was stubbed in the starter code rather than what is tested.
Beyond this, nothing extra has been implemented.


